#pragma once
#include "RLUA.h"

#include <Windows.h>
#include <string>
#include <iostream>
#include <vector>
#include <fstream>
#include <istream>
#include <iterator>
#include <sstream>



static std::vector<std::string> SplitArguments(std::string string)
{
	std::vector<std::string> elements;
	std::stringstream start(string);
	std::istream_iterator<std::string> begin(start);
	std::istream_iterator<std::string> end;
	std::vector<std::string> vectorStrings(begin, end);
	return vectorStrings;
}






void luac(std::string input) {
	try {
		std::vector<std::string> args = SplitArguments(input);

		if (args.at(0) == "getfield") {
			r_lgfield(RESTATE, stoi(args.at(1)), args.at(2).c_str());
			std::cout << "DEBUG GETFIELD: " << std::hex << std::uppercase << r_lgfield << std::endl;
		}

		else if (args.at(0) == "getglobal") {
			r_l_getglobal(RESTATE, args.at(1).c_str());
			
		}

		else if (args.at(0) == "pushstring") {
			r_lpstring(RESTATE, args.at(1).c_str());
		
		}

		else if (args.at(0) == "pcall") {
			r_lpcall(RESTATE, stoi(args.at(1)), stoi(args.at(2)), stoi(args.at(3)));
			
		}
	}
	catch (...) {
		std::cout << "was not able to execute what was inputted" << std::endl;

	}
}


void CMDs(std::string Commands) {
	std::vector<std::string> cmd = SplitArguments(Commands);

	// snip untill i get em running.

}
