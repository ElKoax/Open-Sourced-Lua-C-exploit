#pragma once
#include <Windows.h>
#include <string>
#include <iostream>
#include <vector>
#include <fstream>
#include <istream>
#include <iterator>
#include <sstream>

#include "RLUA.h"





void ConsoleBypass(const char* Title) {
	DWORD aaaa;
	VirtualProtect((PVOID)&FreeConsole, 1, PAGE_EXECUTE_READWRITE, &aaaa);
	*(BYTE*)(&FreeConsole) = 0xC3;
	AllocConsole();
	SetConsoleTitleA(Title);
	freopen("CONOUT$", "w", stdout);
	freopen("CONIN$", "r", stdin);
	HWND ConsoleHandle = GetConsoleWindow();
	::SetWindowPos(ConsoleHandle, HWND_TOPMOST, 0, 0, 0, 0, SWP_DRAWFRAME | SWP_NOMOVE | SWP_NOSIZE | SWP_SHOWWINDOW);
	::ShowWindow(ConsoleHandle, SW_NORMAL);
}

static std::vector<std::string> SplitArguments(std::string string)
{
	std::vector<std::string> elements;
	std::stringstream start(string);
	std::istream_iterator<std::string> begin(start);
	std::istream_iterator<std::string> end;
	std::vector<std::string> vectorStrings(begin, end);
	return vectorStrings;
	// vouch thanks ringarang, as i could not be bothered writing my own. lol
}




void luac(std::string input) {
	printf("Luac was used! \n");
	std::vector<std::string> LC = SplitArguments(input);
    
	if (input == "getglobal") {
		r_l_getglobal(RESTATE, LC.at(1).c_str()); // for now this will grab the "global"
	}
	else if (input == "pcall") {
	// starting soon,
	}


}



int main() {

	ConsoleBypass("Nigger");

	auto SCVFTBLE = x(0x1CC12BC);


	std::cout << "Yeet Started scanning...... " << "\n";
	ScriptContext = Memory::Scan((BYTE*)&SCVFTBLE, (BYTE*)"xxxx", PAGE_READWRITE);
	if (!ScriptContext) {
		printf("ScriptContext Scan Failed!\n");
		system("pause");
		exit(0);
	}

	RESTATE = (ScriptContext + 56 * 0 + 172) ^ *(DWORD *)(ScriptContext + 56 * 0 + 172); // the only updated shit in here.
	printf("Finished the scanning....\n");

// will add the while true statement soon.


	return 1;
}


BOOL APIENTRY DllMain(HMODULE Module, DWORD Reason, void* Reserved)
{
	switch (Reason)
	{
	case DLL_PROCESS_ATTACH:
		DisableThreadLibraryCalls(Module);
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)main, NULL, NULL, NULL);
		break;
	case DLL_PROCESS_DETACH:
		//MH_Uninitialize();
		exit(0);
		break;
	default: break;
	}
	return TRUE;
}

